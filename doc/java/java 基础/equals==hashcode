# ==

## == 基本数据类型

 byte，short，int，long，float，double，char，boolean 

比较数据 ，cpu 会对内存实际存放的数据进行比较 ，寄存器会存储结果  0 为相等  1为不相等

## == 引用数据类型



 引用, 指向堆内存中一个具体的对象 

 所以用"=="判断两个引用数据类型是否相等的时候，实际上是在判断两个引用**是否指向同一个对象**。 



```java
public static void main(String[] args) {
    String s1 = "hello";	//s1指向字符串常量池中的"hello"字符串对象
    String s2 = "hello";	//s2也指向字符串常量池中的"hello"字符串对象
    System.out.println(s1 == s2);   //true

    String s3 = new String("hello");   //s3指向的是堆内存中的字符串对象 
    System.out.println(s1 == s3);	//false
}

```



# equals



==equals()和 == 有着本质的区别， == 可以看作是对“操作系统比较数据手段”的封装，而equals()则是每个对象自带的比较方法，它是Java自定义的比较规则== 

equals()和 == 的本质区别更通俗的说法是：==的比较规则是定死的，就是比较两个数据的值。

而 equals() 的比较规则是不固定的，可以由用户自己定义



```java
public static void main(String[] args) {
    String s1 = "hello";
    String s3 = new String("hello");    
    System.out.println(s1.equals(s3));	//true
}
```



查看源码

```java
public boolean equals(Object anObject) {
    if (this == anObject) {	//先比较两个字符串的引用是否相等(是否指向同一个对象), 是直接返回true
        return true;
    }
    if (anObject instanceof String) {	//两个引用不等还会继续比较
        String anotherString = (String)anObject;
        int n = value.length;
        if (n == anotherString.value.length) {
            char v1[] = value;	//字符串类是用字符数组实现的, 先要拿到两个字符串的字符数组
            char v2[] = anotherString.value;
            int i = 0;
            while (n-- != 0) {	//然后对两个数组逐个字符地进行比较
                if (v1[i] != v2[i])
                    return false;
                i++;
            }
            return true;
        }
    }
    return false;
}
```

## 为什么要有equals？

== 比较两个对象的引用内存地址是否一样，但是java是面向对象编程的，所以存在一个问题，在很多情况下，需要比较两个对象的成员变量是否相等来确定是不是同一个对象，所以会产生一个问题就是单靠== 无法做到，
1：==这个时候java 就开放出来了一个equals的方式，默认情况下不重写equals的时，依然比较的是对象 == 对象 也就是说比较的是两个内存地址==

2：==重写equlas会放权给开发者，进而达到完全自主比较对象是否相等，这就是equlas存在的很大的意义==。

# hashCode

## hashCode 存在的意义：

对于疑问？已经有了equals 问什么还要有hashcode？

1：比较两个两个对象是否相等，的确equals已经完全够用了，但是效率比较慢，（这就是hashcode存在的必要了）

​		a、hashcode ：三列函数产生的hacode 	

​									特性：==输入相同产生的hashcode必然相等==

​                                               当然对于数据量巨大的时候，不同输入也会产生相同的hashcode 这个是hashcode冲突题， 

​                                                 毕竟是少数

​                 由此产生一个现象就是，直接比较hascode 可以使得比较对象时间复杂度会大大降低就是1，

​                这就是hascode产生的原因

针对java 集合 hashmap 中就是运用了次思想，使得可以更快的查找key值下的对象，

2：那么问题是，hashcode 会有不相同的输入也会产生相同的hashcode输出   hashcode冲突问题，这个怎么解决呢，那么这个时候就会用到equals 来比较，当hashcode相同的情况下会再次比较equals来确定当前还不是同一个对象，



总结：这也就是为什么在重写equals的时候需要重写hashCode  也为此产生了几个定律：

1、两个对象的equals相等，hashcode必然相等。

2、两个对象不等，hashcode也可能相等。

3、hashcode相等，对象不一定相等。

4、hashcode不等，对象一定不等。



![1595476356710](../../../art/equals==hashcode/1595476356710.png)



![1595476371656](../../../art/equals==hashcode/1595476371656.png)

![1595476385536](../../../art/equals==hashcode/1595476385536.png)



# [Java 如何重写对象的 equals 方法和 hashCode 方法](https://www.cnblogs.com/yuxiaole/p/9570850.html)

> 前言：Java 对象如果要比较是否相等，则需要重写 equals 方法，同时重写 hashCode 方法，而且 hashCode 方法里面使用质数 31。接下来看看各种为什么。

## 一、需求：

　　对比两个对象是否相等。对于下面的 User 对象，只需姓名和年龄相等则认为是同一个对象。

## 二、解决方案：

　　需要重写对象的 equals 方法和 hashCode 方法

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

```
package com.yule.user.entity;

import org.springframework.util.StringUtils;

/**
 * 用户实体
 *
 * @author yule
 * @date 2018/8/6 21:51
 */
public class User {
    private String id;
    private String name;
    private String age;

    public User(){

    }

    public User(String id, String name, String age){
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAge() {
        return age;
    }

    public void setAge(String age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return this.id + " " + this.name + " " + this.age;
    }

    @Override
    public boolean equals(Object obj) {
        if(this == obj){
            return true;//地址相等
        }

        if(obj == null){
            return false;//非空性：对于任意非空引用x，x.equals(null)应该返回false。
        }

        if(obj instanceof User){
            User other = (User) obj;
            //需要比较的字段相等，则这两个对象相等
            if(equalsStr(this.name, other.name)
                    && equalsStr(this.age, other.age)){
                return true;
            }
        }

        return false;
    }

    private boolean equalsStr(String str1, String str2){
        if(StringUtils.isEmpty(str1) && StringUtils.isEmpty(str2)){
            return true;
        }
        if(!StringUtils.isEmpty(str1) && str1.equals(str2)){
            return true;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + (name == null ? 0 : name.hashCode());
        result = 31 * result + (age == null ? 0 : age.hashCode());
        return result;
    }
}
```

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

## 三、测试

　　1、创建两个对象，名字和年龄相等则对象 equals 为 true。

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

```
    @Test
    public void testEqualsObj(){
        User user1 = new User("1", "xiaohua", "14");
        User user2 = new User("2", "xiaohua", "14");
        System.out.println((user1.equals(user2)));//打印为 true
    }
```

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

##  四、为什么要重写 equals 方法

　　因为不重写 equals 方法，执行 user1.equals(user2) 比较的就是两个对象的地址（即 user1 == user2），肯定是不相等的，见 Object 源码：

```
    public boolean equals(Object obj) {
        return (this == obj);
    }
```

## 五、为什么要重写 hashCode 方法

　　既然比较两个对象是否相等，使用的是 equals 方法，那么只要重写了 equals 方法就好了，干嘛又要重写 hashCode 方法呢？

　　其实当 equals 方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。那这又是为什么呢？看看下面这个例子就懂了。

　　User 对象的 hashCode 方法如下，没有重写父类的 hashCode 方法

```
    @Override
    public int hashCode() {
        return super.hashCode();
    }
```

　　使用 hashSet

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

```
    @Test
    public void testHashCodeObj(){
        User user1 = new User("1", "xiaohua", "14");
        User user2 = new User("2", "xiaohua", "14");
        Set<User> userSet = new HashSet<>();
        userSet.add(user1);
        userSet.add(user2);
        System.out.println(user1.equals(user2));
        System.out.println(user1.hashCode() == user2.hashCode());
        System.out.println(userSet);
    }
```

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

　　结果

![img](https://images2018.cnblogs.com/blog/1426577/201809/1426577-20180901162511755-1915291970.png)

　　显然，这不是我们要的结果，我们是希望两个对象如果相等，那么在使用 hashSet 存储时也能认为这两个对象相等。

　　通过看 hashSet 的 add 方法能够得知 add 方法里面使用了对象的 hashCode 方法来判断，所以我们需要重写 hashCode 方法来达到我们想要的效果。

　　将 hashCode 方法重写后，执行上面结果为

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

```
    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + (name == null ? 0 : name.hashCode());
        result = 31 * result + (age == null ? 0 : age.hashCode());
        return result;
    }
```

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

**![img](https://images2018.cnblogs.com/blog/1426577/201809/1426577-20180901163358504-337879060.png)**

　　**所以：hashCode 是用于散列数据的快速存取，如利用 HashSet/HashMap/Hashtable 类来存储数据时，都会根据存储对象的 hashCode 值来进行判断是否相同的。**

## 六、如何重写 hashCode

　　生成一个 int 类型的变量 result，并且初始化一个值，比如17

　　对类中每一个重要字段，也就是影响对象的值的字段，也就是 equals 方法里有比较的字段，进行以下操作：

a. 计算这个字段的值 filedHashValue = filed.hashCode(); 

b. 执行 result = 31 * result + filedHashValue;

## 七、为什么要使用 31

　　看一看 String hashCode 方法的源码：

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

```
    /**
     * Returns a hash code for this string. The hash code for a
     * {@code String} object is computed as
     * <blockquote><pre>
     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
     * </pre></blockquote>
     * using {@code int} arithmetic, where {@code s[i]} is the
     * <i>i</i>th character of the string, {@code n} is the length of
     * the string, and {@code ^} indicates exponentiation.
     * (The hash value of the empty string is zero.)
     *
     * @return  a hash code value for this object.
     */
    public int hashCode() {
        int h = hash;
        if (h == 0 && value.length > 0) {
            char val[] = value;

            for (int i = 0; i < value.length; i++) {
                h = 31 * h + val[i];
            }
            hash = h;
        }
        return h;
    }
```

[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)

　　可以从注释看出：空字符串的 hashCode 方法返回是 0。并且注释中也给了个公式，可以了解了解。

　　String 源码中也使用的 31，然后网上说有这两点原因：

### 原因一：更少的乘积结果冲突

　　31是质子数中一个“不大不小”的存在，如果你使用的是一个如2的较小质数，那么得出的乘积会在一个很小的范围，很容易造成哈希值的冲突。而如果选择一个100以上的质数，得出的哈希值会超出int的最大范围，这两种都不合适。而如果对超过 50,000 个英文单词（由两个不同版本的 Unix 字典合并而成）进行 hash code 运算，并使用常数 31, 33, 37, 39 和 41 作为乘子，每个常数算出的哈希值冲突数都小于7个（国外大神做的测试），那么这几个数就被作为生成hashCode值得备选乘数了。

　　所以从 31,33,37,39 等中间选择了 31 的原因看原因二。

### 原因二：31 可以被 JVM 优化

　　JVM里最有效的计算方式就是进行位运算了：

　　* 左移 << : 左边的最高位丢弃，右边补全0（把 << 左边的数据*2的移动次幂）。
　　* 右移 >> : 把>>左边的数据/2的移动次幂。
　　* 无符号右移 >>> : 无论最高位是0还是1，左边补齐0。 　　

​    所以 ： 31 * i = (i << 5) - i（左边 31*2=62,右边  2*2^5-2=62） - 两边相等，JVM就可以高效的进行计算啦。。。





HashCode重写诀窍：
1：boolean 类型  f ? 0:1;

2：引用对象也需要重写HashCode

3：以一个固定数值 result = 17：为基础数值

4：以31位质子基础 * result +d对象的hascode



```java
@Override
   public int hashCode() {
        int result = 17;
        result = 31 * result + mInt;
        result = 31 * result + (mBoolean ? 1 : 0);
        result = 31 * result + Float.floatToIntBits(mFloat);
        result = 31 * result + (int)(mLong ^ (mLong >>> 32));
        long mDoubleTemp = Double.doubleToLongBits(mDouble);
        result =31 * result + (int)(mDoubleTemp ^ (mDoubleTemp >>> 32));
        result = 31 * result + (mString == null ? 0 : mMsgContain.hashCode());
        result = 31 * result + (mObj == null ? 0 : mObj.hashCode());
        return result;
    }
```











